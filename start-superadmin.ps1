# üöÄ Script de D√©marrage et Test - Super Admin TravelSaaS
# Auteur: TravelSaaS Team
# Date: 2024

Write-Host "üéØ D√©marrage du syst√®me Super Admin TravelSaaS" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

# Configuration des couleurs
$SuccessColor = "Green"
$ErrorColor = "Red"
$WarningColor = "Yellow"
$InfoColor = "Cyan"

# Fonction pour afficher les messages
function Write-Success { param($Message) Write-Host "‚úÖ $Message" -ForegroundColor $SuccessColor }
function Write-Error { param($Message) Write-Host "‚ùå $Message" -ForegroundColor $ErrorColor }
function Write-Warning { param($Message) Write-Host "‚ö†Ô∏è $Message" -ForegroundColor $WarningColor }
function Write-Info { param($Message) Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor $InfoColor }

# √âtape 1: V√©rification de l'environnement
Write-Info "V√©rification de l'environnement de d√©veloppement..."

# V√©rifier si .NET est install√©
try {
    $dotnetVersion = dotnet --version
    Write-Success ".NET version: $dotnetVersion"
} catch {
    Write-Error ".NET n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

# V√©rifier si Entity Framework est install√©
try {
    $efVersion = dotnet ef --version
    Write-Success "Entity Framework version: $efVersion"
} catch {
    Write-Warning "Entity Framework CLI n'est pas install√© globalement"
    Write-Info "Installation d'Entity Framework CLI..."
    dotnet tool install --global dotnet-ef
}

# √âtape 2: Nettoyage et compilation
Write-Info "Nettoyage et compilation du projet..."

# Nettoyer les builds pr√©c√©dents
dotnet clean
if ($LASTEXITCODE -eq 0) {
    Write-Success "Nettoyage termin√©"
} else {
    Write-Error "Erreur lors du nettoyage"
    exit 1
}

# Restaurer les packages
dotnet restore
if ($LASTEXITCODE -eq 0) {
    Write-Success "Restauration des packages termin√©e"
} else {
    Write-Error "Erreur lors de la restauration des packages"
    exit 1
}

# Compiler le projet
dotnet build
if ($LASTEXITCODE -eq 0) {
    Write-Success "Compilation r√©ussie"
} else {
    Write-Error "Erreur de compilation"
    exit 1
}

# √âtape 3: Configuration de la base de donn√©es
Write-Info "Configuration de la base de donn√©es..."

# Cr√©er la base de donn√©es si elle n'existe pas
dotnet ef database update
if ($LASTEXITCODE -eq 0) {
    Write-Success "Base de donn√©es mise √† jour"
} else {
    Write-Warning "Erreur lors de la mise √† jour de la base de donn√©es"
    Write-Info "Tentative de cr√©ation de la base de donn√©es..."
    dotnet ef database drop --force
    dotnet ef database update
}

# √âtape 4: D√©marrage de l'application
Write-Info "D√©marrage de l'application TravelSaaS..."

# Lancer l'application en arri√®re-plan
$process = Start-Process -FilePath "dotnet" -ArgumentList "run" -PassThru -WindowStyle Hidden

# Attendre que l'application d√©marre
Write-Info "Attente du d√©marrage de l'application..."
Start-Sleep -Seconds 10

# √âtape 5: Test de l'application
Write-Info "Test de l'application..."

# V√©rifier si l'application r√©pond
try {
    $response = Invoke-WebRequest -Uri "https://localhost:7000" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Success "Application accessible sur https://localhost:7000"
    } else {
        Write-Warning "Application accessible mais statut: $($response.StatusCode)"
    }
} catch {
    Write-Warning "Application pas encore pr√™te, nouvelle tentative dans 5 secondes..."
    Start-Sleep -Seconds 5
    try {
        $response = Invoke-WebRequest -Uri "https://localhost:7000" -UseBasicParsing -TimeoutSec 10
        Write-Success "Application maintenant accessible"
    } catch {
        Write-Error "Impossible d'acc√©der √† l'application"
    }
}

# √âtape 6: Affichage des informations de connexion
Write-Host ""
Write-Host "üéâ Configuration Super Admin Termin√©e !" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Informations de Connexion:" -ForegroundColor White
Write-Host "   URL: https://localhost:7000" -ForegroundColor Cyan
Write-Host "   Email: superadmin@travelsaas.com" -ForegroundColor Cyan
Write-Host "   Mot de passe: Admin@12345" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîß Pour l'environnement de d√©veloppement:" -ForegroundColor White
Write-Host "   Email: dev.superadmin@travelsaas.com" -ForegroundColor Cyan
Write-Host "   Mot de passe: DevAdmin@2024!" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìö Documentation:" -ForegroundColor White
Write-Host "   - SUPER_ADMIN_SETUP.md" -ForegroundColor Cyan
Write-Host "   - TEST_SUPER_ADMIN.md" -ForegroundColor Cyan
Write-Host ""
Write-Host "üõë Pour arr√™ter l'application: Ctrl+C" -ForegroundColor Yellow
Write-Host ""

# √âtape 7: Ouverture automatique du navigateur
Write-Info "Ouverture du navigateur..."
Start-Process "https://localhost:7000"

# √âtape 8: Surveillance de l'application
Write-Info "Surveillance de l'application en cours..."
Write-Host "Appuyez sur 'Q' pour quitter, 'R' pour red√©marrer" -ForegroundColor Yellow

while ($true) {
    if ([Console]::KeyAvailable) {
        $key = [Console]::ReadKey($true)
        if ($key.Key -eq 'Q') {
            Write-Info "Arr√™t de l'application..."
            Stop-Process -Id $process.Id -Force
            Write-Success "Application arr√™t√©e"
            break
        }
        elseif ($key.Key -eq 'R') {
            Write-Info "Red√©marrage de l'application..."
            Stop-Process -Id $process.Id -Force
            Start-Sleep -Seconds 2
            $process = Start-Process -FilePath "dotnet" -ArgumentList "run" -PassThru -WindowStyle Hidden
            Write-Success "Application red√©marr√©e"
        }
    }
    
    # V√©rifier si l'application fonctionne toujours
    if ($process.HasExited) {
        Write-Error "L'application s'est arr√™t√©e inopin√©ment"
        break
    }
    
    Start-Sleep -Seconds 1
}

Write-Host ""
Write-Host "üëã Merci d'avoir utilis√© TravelSaaS !" -ForegroundColor Green
