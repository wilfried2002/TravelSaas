@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Utilisateurs - Super Admin</title>
    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --light-bg: #f8f9fa;
            --border-color: #e9ecef;
            --text-dark: #333;
            --text-muted: #666;
        }

        body {
            background: var(--light-bg);
            min-height: 100vh;
            display: block;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .dashboard-header {
            background: var(--primary-gradient);
            color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(40, 167, 69, 0.3);
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .dashboard-header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 300;
        }
        
        .header-actions {
            display: flex;
            gap: 15px;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        .btn-primary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-primary:hover:not(:disabled) {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }
        
        .btn-success {
            background: var(--success-color);
            color: white;
        }
        
        .btn-success:hover:not(:disabled) {
            background: #218838;
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }
        
        .btn i {
            margin-right: 8px;
        }
        
        .content-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .card-header {
            background: var(--light-bg);
            padding: 20px 30px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .card-header h3 {
            margin: 0;
            color: var(--text-dark);
            font-size: 1.5rem;
            font-weight: 500;
        }
        
        .filters {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .filter-select {
            padding: 8px 15px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            background: white;
            transition: border-color 0.3s ease;
        }
        
        .filter-select:focus {
            outline: none;
            border-color: var(--success-color);
        }
        
        .search-input {
            padding: 8px 15px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            width: 300px;
            transition: border-color 0.3s ease;
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--success-color);
        }
        
        .users-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .users-table th {
            background: var(--light-bg);
            padding: 15px;
            text-align: left;
            font-weight: 600;
            color: var(--text-dark);
            border-bottom: 2px solid var(--border-color);
        }
        
        .users-table td {
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }
        
        .users-table tr:hover {
            background: #f8f9fa;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .user-details h5 {
            margin: 0;
            color: var(--text-dark);
            font-size: 1rem;
        }
        
        .user-details p {
            margin: 0;
            color: var(--text-muted);
            font-size: 0.9rem;
        }
        
        .role-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .role-superadmin {
            background: #d1ecf1;
            color: #0c5460;
        }
        
        .role-globaladmin {
            background: #d4edda;
            color: #155724;
        }
        
        .role-pointadmin {
            background: #fff3cd;
            color: #856404;
        }
        
        .role-operator {
            background: #f8d7da;
            color: #721c24;
        }
        
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .status-active {
            background: #d4edda;
            color: #155724;
        }
        
        .status-inactive {
            background: #f8d7da;
            color: #721c24;
        }

        .last-login {
            font-size: 0.85rem;
            color: var(--text-muted);
        }

        .online-indicator {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            color: var(--success-color);
            font-weight: 500;
        }

        .online-dot {
            width: 8px;
            height: 8px;
            background: var(--success-color);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        .user-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.9rem;
        }
        
        .btn-warning {
            background: var(--warning-color);
            color: #212529;
        }
        
        .btn-warning:hover:not(:disabled) {
            background: #e0a800;
            color: #212529;
        }
        
        .btn-danger {
            background: var(--danger-color);
            color: white;
        }
        
        .btn-danger:hover:not(:disabled) {
            background: #c82333;
            color: white;
        }
        
        .btn-info {
            background: var(--info-color);
            color: white;
        }
        
        .btn-info:hover:not(:disabled) {
            background: #138496;
            color: white;
        }
        
        /* Modales améliorées */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            opacity: 1;
        }

        .modal-content {
            background-color: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            opacity: 0;
            transition: all 0.3s ease;
            position: relative;
        }

        .modal.show .modal-content {
            transform: scale(1) translateY(0);
            opacity: 1;
        }
        
        .modal-header {
            background: var(--primary-gradient);
            color: white;
            padding: 20px 30px;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            font-size: 1.3rem;
        }
        
        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: opacity 0.2s;
        }
        
        .close:hover {
            opacity: 0.7;
        }
        
        .modal-body {
            padding: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-dark);
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--success-color);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .modal-footer {
            padding: 20px 30px;
            background: var(--light-bg);
            border-radius: 0 0 15px 15px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 50px;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--success-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-muted);
        }
        
        .empty-state i {
            font-size: 4rem;
            color: #ddd;
            margin-bottom: 20px;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            padding: 20px;
            background: var(--light-bg);
        }
        
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.2s ease;
        }
        
        .pagination button:hover:not(:disabled) {
            background: #e9ecef;
        }
        
        .pagination button.active {
            background: var(--success-color);
            color: white;
            border-color: var(--success-color);
        }
        
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Spinner global amélioré */
        .global-spinner {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 2000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
        }
        
        .global-spinner-content {
            background: white;
            padding: 30px 40px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }
        
        .global-spinner .spinner {
            width: 50px;
            height: 50px;
            margin-bottom: 15px;
        }
        
        /* Toast notifications améliorées */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 2001;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .toast {
            padding: 15px 20px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
            animation: slideInRight 0.3s ease-out;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 300px;
            border-left: 4px solid;
        }
        
        .toast-success {
            background: #d4edda;
            color: #155724;
            border-left-color: var(--success-color);
        }
        
        .toast-error {
            background: #f8d7da;
            color: #721c24;
            border-left-color: var(--danger-color);
        }

        .toast-warning {
            background: #fff3cd;
            color: #856404;
            border-left-color: var(--warning-color);
        }

        .toast-info {
            background: #d1ecf1;
            color: #0c5460;
            border-left-color: var(--info-color);
        }
        
        @@keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @@keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }

        /* Indicateur de chargement pour les boutons */
        .btn-loading {
            position: relative;
            color: transparent !important;
        }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: button-spinner 0.8s linear infinite;
        }

        @@keyframes button-spinner {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Overlay de chargement pour modal */
        .modal-loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            border-radius: 15px;
        }

        .modal-loading .spinner {
            width: 40px;
            height: 40px;
        }

        .modal-loading p {
            margin-top: 10px;
            color: var(--text-muted);
            font-weight: 500;
        }
        
        @@media (max-width: 768px) {
            .dashboard-header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }
            
            .header-actions {
                flex-direction: column;
                width: 100%;
            }
            
            .filters {
                flex-direction: column;
                width: 100%;
            }
            
            .search-input {
                width: 100%;
            }
            
            .users-table {
                font-size: 0.9rem;
            }
            
            .users-table th,
            .users-table td {
                padding: 10px 8px;
            }
            
            .user-actions {
                flex-direction: column;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }
        }

        @@media (max-width: 480px) {
            .dashboard-header {
                padding: 20px;
            }
            
            .dashboard-header h1 {
                font-size: 2rem;
            }
            
            .card-header {
                padding: 15px 20px;
            }
            
            .modal-body {
                padding: 20px;
            }
            
            .filters {
                gap: 10px;
            }
            
            .filter-select, .search-input {
                width: 100%;
            }

            .toast {
                min-width: 250px;
                padding: 12px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1><i class="bi bi-people"></i> Gestion des Utilisateurs</h1>
            <div class="header-actions">
                <a href="@(User.IsInRole("SuperAdmin") ? "/SuperAdmin/Dashboard" : "/GlobalAdmin/Dashboard")" class="btn btn-primary">
                    <i class="bi bi-arrow-left"></i> Retour
                </a>
                <button class="btn btn-success" onclick="openCreateModal()" id="createUserBtn">
                    <i class="bi bi-person-plus"></i> Nouvel Utilisateur
                </button>
            </div>
        </div>

        <div class="content-card">
            <div class="card-header">
                <h3><i class="bi bi-list"></i> Liste des Utilisateurs</h3>
                <div class="filters">
                    <select id="roleFilter" class="filter-select" onchange="applyFiltersAndSearch()">
                        <option value="">Tous les rôles</option>
                        <option value="SuperAdmin">Super Admin</option>
                        <option value="AgencyGlobalAdmin">Global Admin</option>
                        <option value="AgencyPointAdmin">Point Admin</option>
                        <option value="AgencyOperator">Opérateur</option>
                    </select>
                    <select id="statusFilter" class="filter-select" onchange="applyFiltersAndSearch()">
                        <option value="">Tous les statuts</option>
                        <option value="true">Actifs</option>
                        <option value="false">Inactifs</option>
                    </select>
                    <input type="text" id="searchInput" class="search-input" placeholder="Rechercher un utilisateur..." onkeyup="debounce(applyFiltersAndSearch, 300)()">
                </div>
            </div>
            
            <div id="loading" class="loading">
                <div class="spinner"></div>
                <p>Chargement des utilisateurs...</p>
            </div>
            
            <div id="usersContainer">
                <table class="users-table">
                    <thead>
                        <tr>
                            <th>Utilisateur</th>
                            <th>Rôle</th>
                            <th>Agence</th>
                            <th>Statut</th>
                            <th>Dernière connexion</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Les utilisateurs seront chargés ici dynamiquement -->
                    </tbody>
                </table>
            </div>
            
            <div id="pagination" class="pagination">
                <!-- La pagination sera générée ici dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Modal de création/modification d'utilisateur -->
    <div id="userModal" class="modal">
        <div class="modal-content">
            <!-- Overlay de chargement pour le modal -->
            <div id="modalLoading" class="modal-loading" style="display: none;">
                <div class="spinner"></div>
                <p id="modalLoadingText">Enregistrement en cours...</p>
            </div>

            <div class="modal-header">
                <h3 id="modalTitle">Nouvel Utilisateur</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="firstName"><i class="bi bi-person"></i> Prénom</label>
                            <input type="text" id="firstName" name="firstName" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="lastName"><i class="bi bi-person"></i> Nom</label>
                            <input type="text" id="lastName" name="lastName" class="form-control" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="email"><i class="bi bi-envelope"></i> Email</label>
                        <input type="email" id="email" name="email" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="password"><i class="bi bi-lock"></i> Mot de passe</label>
                        <input type="password" id="password" name="password" class="form-control" required>
                        <small style="color: var(--text-muted); font-size: 0.8rem;">Minimum 6 caractères</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="phoneNumber"><i class="bi bi-telephone"></i> Téléphone</label>
                        <input type="tel" id="phoneNumber" name="phoneNumber" class="form-control">
                    </div>
                    
                    <div class="form-group">
                        <label for="role"><i class="bi bi-shield"></i> Rôle</label>
                        <select id="role" name="role" class="form-control" required onchange="toggleAgencyFields()">
                            <option value="">Sélectionner un rôle</option>
                            <option value="SuperAdmin">Super Admin</option>
                            <option value="AgencyGlobalAdmin">Global Admin</option>
                            <option value="AgencyPointAdmin">Point Admin</option>
                            <option value="AgencyOperator">Opérateur</option>
                        </select>
                    </div>
                    
                    <div id="agencyFields" style="display: none;">
                        <div class="form-group">
                            <label for="agencyId"><i class="bi bi-building"></i> Agence</label>
                            <select id="agencyId" name="agencyId" class="form-control">
                                <option value="">Sélectionner une agence</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="agencyPointId"><i class="bi bi-geo-alt"></i> Point d'Agence</label>
                            <select id="agencyPointId" name="agencyPointId" class="form-control">
                                <option value="">Sélectionner un point d'agence</option>
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()" id="cancelBtn">Annuler</button>
                <button type="button" class="btn btn-success" onclick="saveUser()" id="saveUserBtn">
                    <i class="bi bi-check-circle"></i> Enregistrer
                </button>
            </div>
        </div>
    </div>

    <!-- Spinner global -->
    <div id="globalSpinner" class="global-spinner">
        <div class="global-spinner-content">
            <div class="spinner"></div>
            <p id="spinnerText">Traitement en cours...</p>
        </div>
    </div>

    <!-- Conteneur des notifications -->
    <div id="toastContainer" class="toast-container"></div>

    <script>
        // Variables globales
        let users = [];
        let agencies = [];
        let agencyPoints = [];
        let currentUserId = null;
        let currentPage = 1;
        const pageSize = 10;
        let debounceTimer;
        let lastLoginUpdateInterval;

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        // Fonctions d'initialisation
        async function initializeApp() {
            await Promise.all([
                loadUsers(),
                loadAgencies(),
                loadAgencyPoints()
            ]);
            
            // Démarrer la mise à jour en temps réel des dernières connexions
            startLastLoginUpdates();
        }

        // Fonction pour démarrer les mises à jour en temps réel
        function startLastLoginUpdates() {
            // Mettre à jour les timestamps toutes les 30 secondes
            lastLoginUpdateInterval = setInterval(updateLastLoginDisplays, 30000);
        }

        // Fonction pour mettre à jour l'affichage des dernières connexions
        function updateLastLoginDisplays() {
            const lastLoginCells = document.querySelectorAll('.last-login-time');
            lastLoginCells.forEach(cell => {
                const timestamp = cell.getAttribute('data-timestamp');
                if (timestamp && timestamp !== 'null') {
                    cell.innerHTML = formatLastLogin(new Date(timestamp));
                }
            });
        }

        // Fonction pour formater la dernière connexion
        function formatLastLogin(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) {
                return '<span class="online-indicator"><span class="online-dot"></span>En ligne</span>';
            } else if (diffMins < 60) {
                return `Il y a ${diffMins} min`;
            } else if (diffHours < 24) {
                return `Il y a ${diffHours} h`;
            } else if (diffDays === 1) {
                return 'Hier ' + date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
            } else if (diffDays < 7) {
                return `Il y a ${diffDays} j`;
            } else {
                return date.toLocaleDateString('fr-FR') + ' ' + date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
            }
        }

        // Fonction debounce pour les recherches
        function debounce(func, wait) {
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(debounceTimer);
                    func(...args);
                };
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(later, wait);
            };
        }

        // Fonctions de chargement des données
        async function loadUsers() {
            const loading = document.getElementById('loading');
            const container = document.getElementById('usersTableBody');
            
            showLoading(loading);
            container.innerHTML = '';

            try {
                const response = await fetch(`/SuperAdmin/api/users?page=${currentPage}&pageSize=${pageSize}`);
                if (response.ok) {
                    const data = await response.json();
                    users = data.data || [];
                    applyFiltersAndSearch();
                    updatePagination(data.total, data.page, data.pageSize);
                } else {
                    showToast('Erreur lors du chargement des utilisateurs', 'error');
                }
            } catch (error) {
                console.error('Erreur:', error);
                showToast('Erreur de connexion lors du chargement des utilisateurs', 'error');
            } finally {
                hideLoading(loading);
            }
        }

        async function loadAgencies() {
            try {
                const response = await fetch('/SuperAdmin/api/agencies');
                if (response.ok) {
                    agencies = await response.json();
                    updateAgencySelect();
                }
            } catch (error) {
                console.error('Erreur lors du chargement des agences:', error);
                showToast('Erreur lors du chargement des agences', 'error');
            }
        }

        async function loadAgencyPoints() {
            try {
                const response = await fetch('/SuperAdmin/api/agency-points');
                if (response.ok) {
                    agencyPoints = await response.json();
                    updateAgencyPointSelect();
                }
            } catch (error) {
                console.error('Erreur lors du chargement des points:', error);
                showToast('Erreur lors du chargement des points d\'agence', 'error');
            }
        }

        // Fonctions d'affichage
        function displayUsers(usersToShow) {
            const container = document.getElementById('usersTableBody');
            
            if (usersToShow.length === 0) {
                container.innerHTML = `
                    <tr>
                        <td colspan="6" class="empty-state">
                            <i class="bi bi-people"></i>
                            <h3>Aucun utilisateur trouvé</h3>
                            <p>Commencez par créer votre premier utilisateur</p>
                        </td>
                    </tr>
                `;
                return;
            }

            container.innerHTML = usersToShow.map(user => {
                const initials = `${(user.firstName?.charAt(0) || 'U').toUpperCase()}${(user.lastName?.charAt(0) || 'S').toUpperCase()}`;
                const lastLogin = user.lastLoginAt ? formatLastLogin(new Date(user.lastLoginAt)) : '-';
                
                return `
                    <tr>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar">${initials}</div>
                                <div class="user-details">
                                    <h5>${user.firstName || ''} ${user.lastName || ''}</h5>
                                    <p>${user.email || ''}</p>
                                </div>
                            </div>
                        </td>
                        <td>
                            ${user.roles && user.roles.length ? user.roles.map(r => `
                                <span class="role-badge ${
                                    r === 'SuperAdmin' ? 'role-superadmin' :
                                    r === 'AgencyGlobalAdmin' ? 'role-globaladmin' :
                                    r === 'AgencyPointAdmin' ? 'role-pointadmin' : 'role-operator'
                                }">${r}</span>
                            `).join(' ') : ''}
                        </td>
                        <td>${user.agencyName ?? '-'}</td>
                        <td>
                            <span class="status-badge ${user.isActive ? 'status-active' : 'status-inactive'}">
                                ${user.isActive ? 'Actif' : 'Inactif'}
                            </span>
                        </td>
                        <td class="last-login">
                            <span class="last-login-time" data-timestamp="${user.lastLoginAt || ''}">
                                ${lastLogin}
                            </span>
                        </td>
                        <td>
                            <div class="user-actions">
                                <button class="btn btn-info btn-sm" onclick="editUser('${user.id}')">
                                    <i class="bi bi-pencil"></i> Modifier
                                </button>
                                <button class="btn ${user.isActive ? 'btn-danger' : 'btn-success'} btn-sm" 
                                        onclick="toggleUserStatus('${user.id}', ${user.isActive})">
                                    <i class="bi bi-${user.isActive ? 'pause' : 'play'}"></i> 
                                    ${user.isActive ? 'Désactiver' : 'Activer'}
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Fonctions de filtrage et recherche
        function applyFiltersAndSearch() {
            const term = (document.getElementById('searchInput').value || '').toLowerCase();
            const role = (document.getElementById('roleFilter').value || '').toLowerCase();
            const status = document.getElementById('statusFilter').value;
            let filtered = users;

            if (role) {
                filtered = filtered.filter(u => (u.roles || []).some(r => r.toLowerCase() === role));
            }
            if (status) {
                filtered = filtered.filter(u => String(u.isActive) === status);
            }
            if (term) {
                filtered = filtered.filter(u =>
                    ((u.firstName || '') + ' ' + (u.lastName || '')).toLowerCase().includes(term) ||
                    (u.email || '').toLowerCase().includes(term) ||
                    (u.agencyName || '').toLowerCase().includes(term)
                );
            }
            displayUsers(filtered);
        }

        // Fonctions de pagination
        function updatePagination(total, page, size) {
            const totalPages = Math.max(1, Math.ceil(total / size));
            const pagination = document.getElementById('pagination');
            let html = '';

            // Bouton précédent
            html += `<button ${page <= 1 ? 'disabled' : ''} onclick="goPage(${page - 1})">
                        <i class="bi bi-chevron-left"></i>
                     </button>`;

            // Pages
            for (let p = 1; p <= totalPages; p++) {
                if (p === 1 || p === totalPages || (p >= page - 1 && p <= page + 1)) {
                    html += `<button class="${p === page ? 'active' : ''}" onclick="goPage(${p})">${p}</button>`;
                } else if (p === page - 2 || p === page + 2) {
                    html += `<span>...</span>`;
                }
            }

            // Bouton suivant
            html += `<button ${page >= totalPages ? 'disabled' : ''} onclick="goPage(${page + 1})">
                        <i class="bi bi-chevron-right"></i>
                     </button>`;

            pagination.innerHTML = html;
        }

        function goPage(page) {
            currentPage = page;
            loadUsers();
        }

        // Fonctions de gestion des modales
        function openCreateModal() {
            currentUserId = null;
        